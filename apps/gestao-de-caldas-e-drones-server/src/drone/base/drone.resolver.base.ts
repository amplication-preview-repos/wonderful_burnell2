/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Drone } from "./Drone";
import { DroneCountArgs } from "./DroneCountArgs";
import { DroneFindManyArgs } from "./DroneFindManyArgs";
import { DroneFindUniqueArgs } from "./DroneFindUniqueArgs";
import { DeleteDroneArgs } from "./DeleteDroneArgs";
import { DroneService } from "../drone.service";
@graphql.Resolver(() => Drone)
export class DroneResolverBase {
  constructor(protected readonly service: DroneService) {}

  async _dronesMeta(
    @graphql.Args() args: DroneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Drone])
  async drones(@graphql.Args() args: DroneFindManyArgs): Promise<Drone[]> {
    return this.service.drones(args);
  }

  @graphql.Query(() => Drone, { nullable: true })
  async drone(
    @graphql.Args() args: DroneFindUniqueArgs
  ): Promise<Drone | null> {
    const result = await this.service.drone(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Drone)
  async deleteDrone(
    @graphql.Args() args: DeleteDroneArgs
  ): Promise<Drone | null> {
    try {
      return await this.service.deleteDrone(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
