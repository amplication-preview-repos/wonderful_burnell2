/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DroneService } from "../drone.service";
import { DroneCreateInput } from "./DroneCreateInput";
import { Drone } from "./Drone";
import { DroneFindManyArgs } from "./DroneFindManyArgs";
import { DroneWhereUniqueInput } from "./DroneWhereUniqueInput";
import { DroneUpdateInput } from "./DroneUpdateInput";

export class DroneControllerBase {
  constructor(protected readonly service: DroneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Drone })
  async createDrone(@common.Body() data: DroneCreateInput): Promise<Drone> {
    return await this.service.createDrone({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Drone] })
  @ApiNestedQuery(DroneFindManyArgs)
  async drones(@common.Req() request: Request): Promise<Drone[]> {
    const args = plainToClass(DroneFindManyArgs, request.query);
    return this.service.drones({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Drone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async drone(
    @common.Param() params: DroneWhereUniqueInput
  ): Promise<Drone | null> {
    const result = await this.service.drone({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Drone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDrone(
    @common.Param() params: DroneWhereUniqueInput,
    @common.Body() data: DroneUpdateInput
  ): Promise<Drone | null> {
    try {
      return await this.service.updateDrone({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Drone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDrone(
    @common.Param() params: DroneWhereUniqueInput
  ): Promise<Drone | null> {
    try {
      return await this.service.deleteDrone({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
