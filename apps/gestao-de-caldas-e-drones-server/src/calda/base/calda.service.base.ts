/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Calda as PrismaCalda,
  Defensivos as PrismaDefensivos,
} from "@prisma/client";

export class CaldaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CaldaCountArgs, "select">): Promise<number> {
    return this.prisma.calda.count(args);
  }

  async caldas(args: Prisma.CaldaFindManyArgs): Promise<PrismaCalda[]> {
    return this.prisma.calda.findMany(args);
  }
  async calda(args: Prisma.CaldaFindUniqueArgs): Promise<PrismaCalda | null> {
    return this.prisma.calda.findUnique(args);
  }
  async createCalda(args: Prisma.CaldaCreateArgs): Promise<PrismaCalda> {
    return this.prisma.calda.create(args);
  }
  async updateCalda(args: Prisma.CaldaUpdateArgs): Promise<PrismaCalda> {
    return this.prisma.calda.update(args);
  }
  async deleteCalda(args: Prisma.CaldaDeleteArgs): Promise<PrismaCalda> {
    return this.prisma.calda.delete(args);
  }

  async findDefensivosItems(
    parentId: string,
    args: Prisma.DefensivosFindManyArgs
  ): Promise<PrismaDefensivos[]> {
    return this.prisma.calda
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .defensivosItems(args);
  }
}
