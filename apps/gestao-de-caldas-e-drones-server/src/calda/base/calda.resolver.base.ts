/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Calda } from "./Calda";
import { CaldaCountArgs } from "./CaldaCountArgs";
import { CaldaFindManyArgs } from "./CaldaFindManyArgs";
import { CaldaFindUniqueArgs } from "./CaldaFindUniqueArgs";
import { CreateCaldaArgs } from "./CreateCaldaArgs";
import { UpdateCaldaArgs } from "./UpdateCaldaArgs";
import { DeleteCaldaArgs } from "./DeleteCaldaArgs";
import { DefensivosFindManyArgs } from "../../defensivos/base/DefensivosFindManyArgs";
import { Defensivos } from "../../defensivos/base/Defensivos";
import { CaldaService } from "../calda.service";
@graphql.Resolver(() => Calda)
export class CaldaResolverBase {
  constructor(protected readonly service: CaldaService) {}

  async _caldasMeta(
    @graphql.Args() args: CaldaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Calda])
  async caldas(@graphql.Args() args: CaldaFindManyArgs): Promise<Calda[]> {
    return this.service.caldas(args);
  }

  @graphql.Query(() => Calda, { nullable: true })
  async calda(
    @graphql.Args() args: CaldaFindUniqueArgs
  ): Promise<Calda | null> {
    const result = await this.service.calda(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Calda)
  async createCalda(@graphql.Args() args: CreateCaldaArgs): Promise<Calda> {
    return await this.service.createCalda({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Calda)
  async updateCalda(
    @graphql.Args() args: UpdateCaldaArgs
  ): Promise<Calda | null> {
    try {
      return await this.service.updateCalda({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Calda)
  async deleteCalda(
    @graphql.Args() args: DeleteCaldaArgs
  ): Promise<Calda | null> {
    try {
      return await this.service.deleteCalda(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Defensivos], { name: "defensivosItems" })
  async findDefensivosItems(
    @graphql.Parent() parent: Calda,
    @graphql.Args() args: DefensivosFindManyArgs
  ): Promise<Defensivos[]> {
    const results = await this.service.findDefensivosItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
