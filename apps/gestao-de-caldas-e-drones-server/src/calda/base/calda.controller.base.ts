/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CaldaService } from "../calda.service";
import { CaldaCreateInput } from "./CaldaCreateInput";
import { Calda } from "./Calda";
import { CaldaFindManyArgs } from "./CaldaFindManyArgs";
import { CaldaWhereUniqueInput } from "./CaldaWhereUniqueInput";
import { CaldaUpdateInput } from "./CaldaUpdateInput";
import { DefensivosFindManyArgs } from "../../defensivos/base/DefensivosFindManyArgs";
import { Defensivos } from "../../defensivos/base/Defensivos";
import { DefensivosWhereUniqueInput } from "../../defensivos/base/DefensivosWhereUniqueInput";

export class CaldaControllerBase {
  constructor(protected readonly service: CaldaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Calda })
  async createCalda(@common.Body() data: CaldaCreateInput): Promise<Calda> {
    return await this.service.createCalda({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Calda] })
  @ApiNestedQuery(CaldaFindManyArgs)
  async caldas(@common.Req() request: Request): Promise<Calda[]> {
    const args = plainToClass(CaldaFindManyArgs, request.query);
    return this.service.caldas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Calda })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async calda(
    @common.Param() params: CaldaWhereUniqueInput
  ): Promise<Calda | null> {
    const result = await this.service.calda({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Calda })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCalda(
    @common.Param() params: CaldaWhereUniqueInput,
    @common.Body() data: CaldaUpdateInput
  ): Promise<Calda | null> {
    try {
      return await this.service.updateCalda({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Calda })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCalda(
    @common.Param() params: CaldaWhereUniqueInput
  ): Promise<Calda | null> {
    try {
      return await this.service.deleteCalda({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/defensivosItems")
  @ApiNestedQuery(DefensivosFindManyArgs)
  async findDefensivosItems(
    @common.Req() request: Request,
    @common.Param() params: CaldaWhereUniqueInput
  ): Promise<Defensivos[]> {
    const query = plainToClass(DefensivosFindManyArgs, request.query);
    const results = await this.service.findDefensivosItems(params.id, {
      ...query,
      select: {
        calda: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descricao: true,
        id: true,
        nome: true,
        tipo: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/defensivosItems")
  async connectDefensivosItems(
    @common.Param() params: CaldaWhereUniqueInput,
    @common.Body() body: DefensivosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      defensivosItems: {
        connect: body,
      },
    };
    await this.service.updateCalda({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/defensivosItems")
  async updateDefensivosItems(
    @common.Param() params: CaldaWhereUniqueInput,
    @common.Body() body: DefensivosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      defensivosItems: {
        set: body,
      },
    };
    await this.service.updateCalda({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/defensivosItems")
  async disconnectDefensivosItems(
    @common.Param() params: CaldaWhereUniqueInput,
    @common.Body() body: DefensivosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      defensivosItems: {
        disconnect: body,
      },
    };
    await this.service.updateCalda({
      where: params,
      data,
      select: { id: true },
    });
  }
}
