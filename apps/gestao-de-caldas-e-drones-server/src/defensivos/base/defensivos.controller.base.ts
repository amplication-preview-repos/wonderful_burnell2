/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DefensivosService } from "../defensivos.service";
import { DefensivosCreateInput } from "./DefensivosCreateInput";
import { Defensivos } from "./Defensivos";
import { DefensivosFindManyArgs } from "./DefensivosFindManyArgs";
import { DefensivosWhereUniqueInput } from "./DefensivosWhereUniqueInput";
import { DefensivosUpdateInput } from "./DefensivosUpdateInput";

export class DefensivosControllerBase {
  constructor(protected readonly service: DefensivosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Defensivos })
  async createDefensivos(
    @common.Body() data: DefensivosCreateInput
  ): Promise<Defensivos> {
    return await this.service.createDefensivos({
      data: {
        ...data,

        calda: data.calda
          ? {
              connect: data.calda,
            }
          : undefined,
      },
      select: {
        calda: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descricao: true,
        id: true,
        nome: true,
        tipo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Defensivos] })
  @ApiNestedQuery(DefensivosFindManyArgs)
  async defensivosItems(@common.Req() request: Request): Promise<Defensivos[]> {
    const args = plainToClass(DefensivosFindManyArgs, request.query);
    return this.service.defensivosItems({
      ...args,
      select: {
        calda: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descricao: true,
        id: true,
        nome: true,
        tipo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Defensivos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async defensivos(
    @common.Param() params: DefensivosWhereUniqueInput
  ): Promise<Defensivos | null> {
    const result = await this.service.defensivos({
      where: params,
      select: {
        calda: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descricao: true,
        id: true,
        nome: true,
        tipo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Defensivos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDefensivos(
    @common.Param() params: DefensivosWhereUniqueInput,
    @common.Body() data: DefensivosUpdateInput
  ): Promise<Defensivos | null> {
    try {
      return await this.service.updateDefensivos({
        where: params,
        data: {
          ...data,

          calda: data.calda
            ? {
                connect: data.calda,
              }
            : undefined,
        },
        select: {
          calda: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          descricao: true,
          id: true,
          nome: true,
          tipo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Defensivos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDefensivos(
    @common.Param() params: DefensivosWhereUniqueInput
  ): Promise<Defensivos | null> {
    try {
      return await this.service.deleteDefensivos({
        where: params,
        select: {
          calda: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          descricao: true,
          id: true,
          nome: true,
          tipo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
