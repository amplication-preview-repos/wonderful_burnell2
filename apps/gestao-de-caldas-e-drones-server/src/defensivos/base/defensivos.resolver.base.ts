/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Defensivos } from "./Defensivos";
import { DefensivosCountArgs } from "./DefensivosCountArgs";
import { DefensivosFindManyArgs } from "./DefensivosFindManyArgs";
import { DefensivosFindUniqueArgs } from "./DefensivosFindUniqueArgs";
import { CreateDefensivosArgs } from "./CreateDefensivosArgs";
import { UpdateDefensivosArgs } from "./UpdateDefensivosArgs";
import { DeleteDefensivosArgs } from "./DeleteDefensivosArgs";
import { Calda } from "../../calda/base/Calda";
import { DefensivosService } from "../defensivos.service";
@graphql.Resolver(() => Defensivos)
export class DefensivosResolverBase {
  constructor(protected readonly service: DefensivosService) {}

  async _defensivosItemsMeta(
    @graphql.Args() args: DefensivosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Defensivos])
  async defensivosItems(
    @graphql.Args() args: DefensivosFindManyArgs
  ): Promise<Defensivos[]> {
    return this.service.defensivosItems(args);
  }

  @graphql.Query(() => Defensivos, { nullable: true })
  async defensivos(
    @graphql.Args() args: DefensivosFindUniqueArgs
  ): Promise<Defensivos | null> {
    const result = await this.service.defensivos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Defensivos)
  async createDefensivos(
    @graphql.Args() args: CreateDefensivosArgs
  ): Promise<Defensivos> {
    return await this.service.createDefensivos({
      ...args,
      data: {
        ...args.data,

        calda: args.data.calda
          ? {
              connect: args.data.calda,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Defensivos)
  async updateDefensivos(
    @graphql.Args() args: UpdateDefensivosArgs
  ): Promise<Defensivos | null> {
    try {
      return await this.service.updateDefensivos({
        ...args,
        data: {
          ...args.data,

          calda: args.data.calda
            ? {
                connect: args.data.calda,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Defensivos)
  async deleteDefensivos(
    @graphql.Args() args: DeleteDefensivosArgs
  ): Promise<Defensivos | null> {
    try {
      return await this.service.deleteDefensivos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Calda, {
    nullable: true,
    name: "calda",
  })
  async getCalda(@graphql.Parent() parent: Defensivos): Promise<Calda | null> {
    const result = await this.service.getCalda(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
