/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Defensivos as PrismaDefensivos,
  Calda as PrismaCalda,
} from "@prisma/client";

export class DefensivosServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DefensivosCountArgs, "select">
  ): Promise<number> {
    return this.prisma.defensivos.count(args);
  }

  async defensivosItems(
    args: Prisma.DefensivosFindManyArgs
  ): Promise<PrismaDefensivos[]> {
    return this.prisma.defensivos.findMany(args);
  }
  async defensivos(
    args: Prisma.DefensivosFindUniqueArgs
  ): Promise<PrismaDefensivos | null> {
    return this.prisma.defensivos.findUnique(args);
  }
  async createDefensivos(
    args: Prisma.DefensivosCreateArgs
  ): Promise<PrismaDefensivos> {
    return this.prisma.defensivos.create(args);
  }
  async updateDefensivos(
    args: Prisma.DefensivosUpdateArgs
  ): Promise<PrismaDefensivos> {
    return this.prisma.defensivos.update(args);
  }
  async deleteDefensivos(
    args: Prisma.DefensivosDeleteArgs
  ): Promise<PrismaDefensivos> {
    return this.prisma.defensivos.delete(args);
  }

  async getCalda(parentId: string): Promise<PrismaCalda | null> {
    return this.prisma.defensivos
      .findUnique({
        where: { id: parentId },
      })
      .calda();
  }
}
